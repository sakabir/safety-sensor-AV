function [allData, scenario, sensors] = scene1()
%scene1 - Returns sensor detections
%    allData = scene1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scene1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 23.2 (R2023b) and Automated Driving Toolbox 23.2 (R2023b).
% Generated on: 14-Nov-2023 00:25:44

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = lidarPointCloudGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'AzimuthLimits', [-10 10], ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [0.95 -0.9], ...
    'Yaw', -90.4092486080349, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [0.94 0.9], ...
    'Yaw', 90, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{5} = visionDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{6} = lidarPointCloudGenerator('SensorIndex', 6, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{7} = lidarPointCloudGenerator('SensorIndex', 7, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{8} = lidarPointCloudGenerator('SensorIndex', 8, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{9} = lidarPointCloudGenerator('SensorIndex', 9, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{10} = drivingRadarDataGenerator('SensorIndex', 10, ...
    'MountingLocation', [3.69 0.9 0.2], ...
    'MountingAngles', [36.1581854398083 0 0], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{11} = drivingRadarDataGenerator('SensorIndex', 11, ...
    'MountingLocation', [3.66 -0.83 0.2], ...
    'MountingAngles', [-39.5484489012873 0 0], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{12} = drivingRadarDataGenerator('SensorIndex', 12, ...
    'MountingLocation', [-0.59 0.6 0.2], ...
    'MountingAngles', [150.945395900923 0 0], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{13} = drivingRadarDataGenerator('SensorIndex', 13, ...
    'MountingLocation', [-0.55 -0.57 0.2], ...
    'MountingAngles', [-150.294687605271 0 0], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
numSensors = 13;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [200.6 129.7 0;
    18.1 3.9 0;
    -213.1 423.2 0];
laneSpecification = lanespec(2, 'Width', 7);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [152.7 189.7 0;
    14.7 -14.15 0;
    168.9 -102.8 0];
laneSpecification = lanespec(2, 'Width', 7);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [-124.8 472.4 0;
    143.3 -122.4 0];
marking = [laneMarking('Dashed', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Width', 7.425, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [111.2 -44 0;
    173.5 17.4 0;
    37.2 215.8 0;
    -85.2 389.1 0;
    -262 224 0;
    -275.6 123.9 0;
    -239.8 -103 0;
    -80 -126.2 0;
    75.3 -76.9 0];
marking = [laneMarking('Dashed', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Width', 4.925, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road3');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-217.5 419.8 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Car');
waypoints = [-214.6 419.8 0;
    -215.7 397.1 0;
    -218.3 327.2 0;
    -217.4 283.6 0;
    -212.5 229.4 0;
    -195 164.4 0;
    -181.6 126.1 0;
    -156.2 87.8 0;
    -122.1 47.3 0;
    -82.7 20.2 0;
    -46.2 4.40000000000001 0;
    -12.8 -0.799999999999997 0;
    7.5 -3.59999999999999 0;
    12.3 -14.7 0;
    33.1 -47.2 0;
    61.1 -69.9 0;
    92.8 -85.5 0;
    130.1 -98.5 0;
    136.5 -94.7 0;
    132.1 -83.3 0;
    123.4 -63.2 0;
    119.2 -42.3 0;
    125.7 -37.6 0;
    167.4 -1.89999999999999 0;
    180.7 28.3 0;
    181.4 53.6 0;
    173.4 84.3 0;
    143.9 125 0;
    110.6 155.3 0;
    97.1 160.4 0;
    80 149.6 0;
    47.8 122.1 0;
    42.4 118.1 0;
    35.7 125.6 0;
    22.4 157.3 0;
    3.8 197.5 0;
    -13.2 232.8 0;
    -25.1 261.1 0;
    -44.8 305.8 0;
    -68.4 357.7 0;
    -77.8 379.3 0;
    -84.6 392.4 0;
    -98.2 396.2 0;
    -121.4 398.3 0;
    -148.2 394.7 0;
    -177.7 380.6 0;
    -196.5 367.7 0;
    -213.8 354.1 0;
    -226.7 329 0;
    -240.3 305.1 0;
    -253.9 266.9 0;
    -263.7 229.4 0;
    -270.8 174.8 0;
    -280.3 114 0;
    -288.5 28.8 0;
    -260 -84.4 0;
    -235.1 -110.8 0];
speed = [100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100];
trajectory(egoVehicle, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

